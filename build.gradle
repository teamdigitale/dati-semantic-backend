plugins {
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.2.1'
    id 'com.github.spotbugs' version '6.0.19'
    id 'org.openapi.generator' version '7.7.0'
    id 'idea'
    id 'com.google.cloud.tools.jib' version '3.4.3'
}

group = 'it.gov.innovazione'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    integrationCompileOnly.extendsFrom testCompileOnly
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework:spring-web:6.1.12'

    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    implementation 'org.springframework.data:spring-data-elasticsearch'
    implementation 'org.apache.jena:apache-jena-libs:4.9.0'
    implementation 'org.apache.jena:jena-querybuilder:4.9.0'
    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.8.0.202311291450-r'
    implementation 'org.kohsuke:github-api:1.321'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation 'org.apache.commons:commons-compress:1.26.1'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    implementation 'io.swagger.core.v3:swagger-annotations:2.2.22'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'

    implementation 'org.eclipse.parsson:parsson:1.0.5'

    runtimeOnly 'com.mysql:mysql-connector-j:8.2.0'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    integrationCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
	testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
	integrationCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'io.rest-assured:json-path:5.5.0'
    testImplementation 'org.mockito:mockito-inline:3.9.0'

    integrationImplementation "org.testcontainers:elasticsearch:1.20.0"
    integrationImplementation "org.testcontainers:testcontainers:1.20.0"
    integrationImplementation "org.testcontainers:junit-jupiter:1.20.0"
    integrationImplementation "com.h2database:h2:2.2.224"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

test {
    useJUnitPlatform()
}

jib {
    from {
        image = 'gcr.io/distroless/java17-debian11:nonroot'
    }
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/src/main/resources/public/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = 'it.gov.innovazione.ndc.gen.api'
    invokerPackage = 'it.gov.innovazione.ndc.gen.invoker'
    modelPackage = 'it.gov.innovazione.ndc.gen.dto'
    configOptions = [
            useSpringBoot3       : 'true',
            library              : 'spring-boot',
            performBeanValidation: 'true',
            dateLibrary          : 'java8',
            title                : 'National Data Catalog API',
            interfaceOnly        : 'true'
    ]
}

sourceSets.main.java.srcDir new File(buildDir, 'generated/src/main/java')
idea {
    module {
        generatedSourceDirs += new File(buildDir, 'generated/src/main/java')
    }
}

checkstyle {
    toolVersion = '10.12.4'
    maxWarnings = 0
    ignoreFailures false
    configDirectory = file("${rootProject.projectDir}/config/checkstyle")
}

tasks.withType(Checkstyle) {
    exclude "**/gen/**"
}

jacocoTestReport {
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    violationRules {

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
                    'it.gov.innovazione.ndc.config.*',
                    'it.gov.innovazione.ndc.Application',
                    'it.gov.innovazione.ndc.harvester.util.*',
                    'it.gov.innovazione.ndc.model.*',
                    'it.gov.innovazione.ndc.gen.*',
                    'it.gov.innovazione.ndc.validator.BaseSemanticAssetValidator',
                    'it.gov.innovazione.ndc.controller.*',
                    'it.gov.innovazione.ndc.eventhandler.*',
                    'it.gov.innovazione.ndc.harvester.service.RepositoryService',
                    'it.gov.innovazione.ndc.harvester.service.HarvesterRunService',
                    'it.gov.innovazione.ndc.harvester.SecurityUtils',
                    'it.gov.innovazione.ndc.*Exception',
                    'it.gov.innovazione.ndc.harvester.context.*',
                    'it.gov.innovazione.ndc.harvester.HarvesterJob',
                    'it.gov.innovazione.ndc.model.harvester.HarvesterRun.Status',
                    'it.gov.innovazione.ndc.harvester.service.ActualConfigService',
                    'it.gov.innovazione.ndc.harvester.service.ActualConfigService.Validator',
                    'it.gov.innovazione.ndc.harvester.service.CachingConfigService',
                    'it.gov.innovazione.ndc.harvester.service.ConfigService.NdcConfiguration',
                    'it.gov.innovazione.ndc.harvester.service.ConfigService',
                    'it.gov.innovazione.ndc.service.GithubService*',
                    'it.gov.innovazione.ndc.service.EmailService',
                    'it.gov.innovazione.ndc.service.AlerterMailSender',
                    'it.gov.innovazione.ndc.harvester.harvesters.utils.PathUtils',
                    'it.gov.innovazione.ndc.harvester.service.OnceLogger',
                    'it.gov.innovazione.ndc.harvester.service.ConfigReaderService',
                    'it.gov.innovazione.ndc.service.DefaultInstanceManager',
                    'it.gov.innovazione.ndc.repository.TripleStoreRepository',
                    'it.gov.innovazione.ndc.service.EventCleaner',
                    'it.gov.innovazione.ndc.service.TemplateService',
                    'it.gov.innovazione.ndc.alerter.*'
            ]
        }
    }
}

sourceSets {
    integration {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
compileJava {
    dependsOn tasks.openApiGenerate
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

spotbugsMain {
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude-filter.xml")
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude-filter.xml")
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

dependencyCheck {
//set up a quality gate for vulnerabilities with high severity level:
//let's consider that a vulnerability has a high severity level if its CVSS score is higher than 7
//the build is going to fail if vulnerabilities with high severity level found
    failBuildOnCVSS = 7
    analyzers {
        assemblyEnabled = false
    }

//specify a list of known issues which contain:
//false-positives
//confirmed vulnerabilities which are not fixed yet, but we have a ticket for that
    suppressionFile = 'config/dependency-check/dependency-check-known-issues.xml'
}

task copyPrecommitHooks(type: Exec) {
    workingDir "$projectDir"
    commandLine 'sh', 'config/hooks/copy-precommit-hooks.sh'
}

build.finalizedBy copyPrecommitHooks

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        spotbugsMain.enabled = false
        dependencyCheckAnalyze.enabled = false
        spotbugsTest.enabled = false
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

integrationTest.finalizedBy jacocoTestReport
check.dependsOn integrationTest
jacocoTestCoverageVerification.dependsOn integrationTest
